#!/bin/sh

JavacListsTxt="JavacLists.txt"
CMakeListsTxt="CMakeLists.txt"
NativeListsH="native.h"
NativeListsCpp="native.cpp"

abort() {
  echo "ops(, abort message: $1"
  exit 1
}

clean() {
  rm -rf out 2>/dev/null
  rm $JavacListsTxt $CMakeListsTxt $NativeListsCpp $NativeListsH 2>/dev/null
}

gen_JavacListsTxt() {
    find . -type f -name "*.java" -exec echo {} >> "$JavacListsTxt" \;
}


gen_class() {
  [ ! -d out ] && mkdir out
  javac -d out @${JavacListsTxt} || abort "javac returns non-zero value"
}


gen_CMakeListsTxt() {
  header='
#
# this file is generated by autogen.sh, do NOT modify it.
#
cmake_minimum_required(VERSION 3.4.1)

include_directories(..)
include_directories(out)

add_library(
        jre
        STATIC
'
    echo "$header" > $CMakeListsTxt
    echo "        $NativeListsCpp" >> $CMakeListsTxt

    find . -type f -name "*.cpp" | while read -r i; do
        echo "        $i" >> $CMakeListsTxt
    done
    echo ")" >> $CMakeListsTxt
}

gen_h() {
  PATH="$(dirname "$0")/../cmake-build-release/test/class:$(dirname "$0")/../cmake-build-debug/test/class:$PATH"

# generate .h files
  find out -type f -name "*.class" | while read -r i; do
    test_javah -e "$i" -o "${i%*.class}".h || abort "test_javah returns non-zero value"
  done

# merge all .h files
  header='
/**
 * this file is generated by autogen.sh, do NOT modify it.
 */
'
#  lookup all .h files
  echo "$header" > $NativeListsCpp
  echo "#include \"${NativeListsH}\"\n" >> $NativeListsCpp

  find out -type f -name "*.h" | while read -r i; do
    echo "#include \"$i\"" >> $NativeListsCpp
  done

  echo "\n" >> $NativeListsCpp

  echo "constexpr java_native_class_t java_native_classes[] = {" >> $NativeListsCpp

  count=0
  find out -type f -name "*.h" | while read -r i; do
    class_name=${i%.h}
    class_name="${class_name#out/}"
    class_name=$(echo "$class_name" | sed "s/\//./g")

    methods_list=$(test_javah -m list "${i%.h}".class)
    lines_count=$(echo "$methods_list" | wc -l | sed "s/ //g")

    echo "    { \"$class_name\", $lines_count, {" >> $NativeListsCpp

    echo "$methods_list" | awk '{ print "        { \"" $1 "\", \"" $2 "\", (void*) " $3 " }," }' >> $NativeListsCpp

    echo "    },\n" >> $NativeListsCpp
    count=$((count + 1))
  done

  echo '};' >> $NativeListsCpp
  echo "size_t java_native_classes_num = $count;" >> $NativeListsCpp

  h='
#ifndef JAVA_NATIVE_H
#define JAVA_NATIVE_H

struct java_native_method_t
{
    const char *name;
    const char *sig;
    void *func;
};

struct java_native_class_t
{
    const char *class_name;
    size_t methods_num;
    const struct java_native_method_t *methods;
}

extern const struct java_native_class_t *java_native_classes;
extern size_t java_native_classes_num;

#endif // JAVA_NATIVE_H
'

  echo "$header" > $NativeListsH
  echo "$h" >> $NativeListsH
}

case "$1" in
  "clean")
    clean
  ;;

  "gen_JavacListsTxt")
    gen_JavacListsTxt
  ;;

  "gen_class")
    gen_class
  ;;

  "gen_CMakeListsTxt")
    gen_CMakeListsTxt
  ;;

  "gen_h")
    gen_h
  ;;

  *)
    clean
    gen_JavacListsTxt
    gen_class
    gen_CMakeListsTxt
    gen_h
  ;;
esac




