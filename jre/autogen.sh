#!/bin/sh

JavacListsTxt="JavacLists.txt"
CMakeListsTxt="CMakeLists.txt"
NativeListsH="native.h"
NativeListsCpp="native.cpp"

abort() {
  echo "ops(, abort message: $1"
  exit 1
}

clean() {
  rm -rf out 2>/dev/null
  rm $JavacListsTxt 2>/dev/null
}

gen_JavacListsTxt() {
    find . -type f -name "*.java" -exec echo {} >> "$JavacListsTxt" \;
}


gen_class() {
  [ ! -d out ] && mkdir out
  javac -d out @${JavacListsTxt} || abort "javac returns non-zero value"
}


gen_h() {
  PATH="$(dirname "$0")/../cmake-build-release/test/class:$(dirname "$0")/../cmake-build-debug/test/class:$PATH"

# generate .h files
  find out -type f -name "*.class" | while read -r i; do
    test_javah -e "$i" -o "${i%*.class}".h || abort "test_javah returns non-zero value"
  done

# merge all .h files
  header='
/**
 * this file is generated by autogen.sh, do NOT modify it.
 */
'
#  lookup all .h files
  echo "$header" > $NativeListsCpp
  echo "#include \"${NativeListsH}\"\n" >> $NativeListsCpp

  find out -type f -name "*.h" | while read -r i; do
    echo "#include \"$i\"" >> $NativeListsCpp
  done

  echo "\n" >> $NativeListsCpp

  echo "constexpr java_native_method_t java_native_methods[] = {" >> $NativeListsCpp

  find out -type f -name "*.h" | while read -r i; do
    class_name=${i%.h}
    class_name="${class_name#out/}"

    test_javah -m list "${i%.h}".class | \
    awk '{ print "    { \"" "'"$class_name"'" "\", \"" $1 "\", \"" $2 "\", (void*) " $3 " }," }' >> $NativeListsCpp

    echo '' >> $NativeListsCpp
  done

  echo "    { nullptr, nullptr, nullptr, nullptr }, " >> $NativeListsCpp
  echo '};' >> $NativeListsCpp
}

case "$1" in
  "clean")
    clean
  ;;

  "gen_JavacListsTxt")
    gen_JavacListsTxt
  ;;

  "gen_class")
    gen_class
  ;;

  "gen_CMakeListsTxt")
    gen_CMakeListsTxt
  ;;

  "gen_h")
    gen_h
  ;;

  *)
    clean
    gen_JavacListsTxt
    gen_class
    gen_h
  ;;
esac




