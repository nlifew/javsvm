/**
 * auto generated by javsvm-javah, don't modify it.
 */

#ifndef JAVA_JAVA_LANG_THREAD_H
#define JAVA_JAVA_LANG_THREAD_H

#include <jni.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * class: java/lang/Thread
 * method: currentThread
 * sig: ()Ljava/lang/Thread;
 */
JNIEXPORT jobject JNICALL
Java_java_lang_Thread_currentThread
    (JNIEnv *env, jclass klass);

/**
 * class: java/lang/Thread
 * method: dumpThreads
 * sig: ([Ljava/lang/Thread;)[[Ljava/lang/StackTraceElement;
 */
JNIEXPORT jobjectArray JNICALL
Java_java_lang_Thread_dumpThreads
    (JNIEnv *env, jclass klass, jobjectArray);

/**
 * class: java/lang/Thread
 * method: getThreads
 * sig: ()[Ljava/lang/Thread;
 */
JNIEXPORT jobjectArray JNICALL
Java_java_lang_Thread_getThreads
    (JNIEnv *env, jclass klass);

/**
 * class: java/lang/Thread
 * method: holdsLock
 * sig: (Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL
Java_java_lang_Thread_holdsLock
    (JNIEnv *env, jclass klass, jobject);

/**
 * class: java/lang/Thread
 * method: interrupt0
 * sig: ()V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_interrupt0
    (JNIEnv *env, jobject self);

/**
 * class: java/lang/Thread
 * method: isInterrupted
 * sig: (Z)Z
 */
JNIEXPORT jboolean JNICALL
Java_java_lang_Thread_isInterrupted
    (JNIEnv *env, jobject self, jboolean);

/**
 * class: java/lang/Thread
 * method: registerNatives
 * sig: ()V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_registerNatives
    (JNIEnv *env, jclass klass);

/**
 * class: java/lang/Thread
 * method: setNativeName
 * sig: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_setNativeName
    (JNIEnv *env, jobject self, jstring);

/**
 * class: java/lang/Thread
 * method: setPriority0
 * sig: (I)V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_setPriority0
    (JNIEnv *env, jobject self, jint);

/**
 * class: java/lang/Thread
 * method: sleep
 * sig: (J)V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_sleep
    (JNIEnv *env, jclass klass, jlong);

/**
 * class: java/lang/Thread
 * method: start0
 * sig: ()V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_start0
    (JNIEnv *env, jobject self);

/**
 * class: java/lang/Thread
 * method: yield
 * sig: ()V
 */
JNIEXPORT void JNICALL
Java_java_lang_Thread_yield
    (JNIEnv *env, jclass klass);



#ifdef __cplusplus
}
#endif
#endif // JAVA_JAVA_LANG_THREAD_H

